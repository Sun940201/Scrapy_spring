<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xml:id="apis">
  <title>Working with the GemFire APIs</title>

  <para>
   Once the GemFire Cache and Regions have been configured they can be injected and used inside application objects.
   This chapter describes the integration with Spring's Transaction Management functionality
   and <classname>DaoException</classname> hierarchy. It also covers support for dependency injection
   of GemFire managed objects.
  </para>

  <section id="apis:exception-translation">
   <title>Exception Translation</title>

   <para>
    Using a new data access technology requires not only accommodating a new API but also handling exceptions
    specific to that technology. To accommodate this case, Spring Framework provides a technology agnostic,
    consistent <ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/dao.html#dao-exceptions">exception hierarchy</ulink>
    that abstracts the application from proprietary (and usually checked) exceptions to a set of focused
    runtime exceptions. As mentioned in the Spring Framework documentation,
    <ulink url="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-exception-translation">exception translation</ulink>
    can be applied transparently to your data access objects through the use of the <literal>@Repository</literal>
    annotation and AOP by defining a <classname>PersistenceExceptionTranslationPostProcessor</classname> bean.
    The same exception translation functionality is enabled when using GemFire as long as at least a
    <classname>CacheFactoryBean</classname> is declared, e.g. using a <literal>&lt;gfe:cache/&gt;</literal>
    declaration, as it acts as an exception translator which is automatically detected by the
    Spring infrastructure and used accordingly.
   </para>
  </section>
 
  <section id="apis:template">
    <title>GemfireTemplate</title>

   <para>
    As with many other high-level abstractions provided by the Spring projects, Spring Data GemFire provides a
    <emphasis>template</emphasis> that simplifies GemFire data access. The class provides several
    <emphasis>one-line</emphasis> methods, for common region operations but also the ability to
    <emphasis>execute</emphasis> code against the native GemFire API without having to deal with GemFire
    checked exceptions for example through the <interfacename>GemfireCallback</interfacename>.
   </para>

   <para>
    The template class requires a GemFire <interfacename>Region</interfacename> instance and once configured is
    thread-safe and should be reused across multiple classes:
   </para>

   <programlisting language="xml">&lt;bean id="gemfireTemplate" class="org.springframework.data.gemfire.GemfireTemplate" p:region-ref="someRegion"/&gt;</programlisting>

   <para>
    Once the template is configured, one can use it alongside <interfacename>GemfireCallback</interfacename>
    to work directly with the GemFire <interfacename>Region</interfacename>, without having to deal with
    checked exceptions, threading or resource management concerns:
   </para>

   <programlisting language="java">template.execute(new GemfireCallback&lt;Iterable&lt;String&gt;&gt;() {
 public Iterable&lt;String&gt; doInGemfire(Region reg) throws GemFireCheckedException, GemFireException {
    // working against a Region of String
  Region&lt;String, String&gt; region = reg;

  region.put("1", "one");
  region.put("3", "three");

  return region.query("length &lt; 5");
 }
});</programlisting>

   <para>
    For accessing the full power of the GemFire query language, one can use the <methodname>find</methodname>
    and <methodname>findUnique</methodname> which, as opposed to the <methodname>query</methodname> method,
    can execute queries across multiple regions, execute projections, and the like. The <methodname>find</methodname>
    method should be used when the query selects multiple items (through<literal>SelectResults</literal>)
    and the latter, <methodname>findUnique</methodname>, as the name suggests, when only one object is returned.
   </para>
  </section>

  <section id="apis:spring-cache-abstraction">
   <title>Support for Spring Cache Abstraction</title>

   <para>
    Since 1.1, Spring Data GemFire provides an implementation of the Spring 3.1
    <ulink url="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#cache">cache abstraction</ulink>.
    To use GemFire as a backing implementation, simply add <classname>GemfireCacheManager</classname> to your
    configuration:
   </para>

   <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:cache="http://www.springframework.org/schema/cache"
  xmlns:gfe="http://www.springframework.org/schema/gemfire"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                     http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
                      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

  <!-- turn on declarative caching -->
  <cache:annotation-driven/>

  <gfe:cache id="gemfire-cache"/>

  <!-- declare GemFire Cache Manager -->
  <bean id="cacheManager" class="org.springframework.data.gemfire.support.GemfireCacheManager" p:cache-ref="gemfire-cache">
</beans>]]></programlisting>
  </section>
  

  <section id="apis:tx-mgmt">
   <title>Transaction Management</title>

   <para>
    One of the most popular features of Spring Framework is
    <ulink url="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#transaction">transaction management</ulink>.
    If you are not familiar with it, we strongly recommend
    <ulink url="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#transaction-motivation">reading</ulink>
    about it as it offers a consistent programming model that works transparently across multiple APIs and can be
    configured either programmatically or declaratively (the most popular choice).
   </para>

   <para>
    For GemFire, Spring Data GemFire provides a dedicated, per-cache, transaction manager that, once declared,
    allows Region operations to be executed atomically through Spring:
   </para>

   <programlisting language="xml">&lt;gfe:transaction-manager id="tx-manager" cache-ref="cache"/&gt;</programlisting>

   <note>
    The example above can be simplified even more by eliminating the <literal>cache-ref</literal> attribute
    if the GemFire Cache is defined under the default name<literal>gemfireCache</literal>. As with the other
    Spring Data GemFire namespace elements, if the Cache bean name is not configured, the aforementioned naming
    convention will used. Additionally, the transaction manager name is<literal>gemfireTransactionManager</literal>
    if not explicitly specified.
   </note>

   <para>
    Currently, GemFire supports optimistic transactions with <emphasis>read committed</emphasis> isolation.
    Furthermore, to guarantee this isolation, developers should avoid making <emphasis>in-place</emphasis> changes
    that manually modify values present in the Cache. To prevent this from happening, the transaction manager
    configures the Cache to use <emphasis>copy on read</emphasis> semantics, meaning a clone of the actual value
    is created, each time a read is performed. This behavior can be disabled if needed through the
    <literal>copyOnRead</literal> property. For more information on the semantics of the underlying GemFire
    transaction manager, see the GemFire
    <ulink url="https://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/CacheTransactionManager.html">documentation</ulink>.
   </para>
  </section>

  <xi:include href="cq-container.xml"/>

  <section id="apis:declarable">
    <title>Wiring <interfacename>Declarable</interfacename> components</title>

    <para>GemFire XML configuration (usually named
    <literal>cache.xml</literal> allows <emphasis>user</emphasis> objects to
    be declared as part of the configuration. Usually these objects are
    <interfacename>CacheLoader</interfacename>s or other pluggable callback components
    supported by GemFire. Using native GemFire configuration, each user type declared through
    XML must implement the <interfacename>Declarable</interfacename> interface
    which allows arbitrary parameters to be passed to the declared class
    through a <classname>Properties</classname> instance.</para>

    <para>In this section we describe how you can configure these pluggable
    components defined in <literal>cache.xml</literal> using Spring while
    keeping your Cache/Region configuration defined in
    <literal>cache.xml</literal> This allows your pluggable components to
    focus on the application logic and not the location or creation of
    DataSources or other collaboration objects.</para>

    <para>However, if you are starting a green field project, it is
    recommended that you configure Cache, Region, and other pluggable
    components directly in Spring. This avoids inheriting from the
    <interfacename>Declarable</interfacename> interface or the base class
    presented in this section. See the following sidebar for more information
    on this approach.</para>

    <sidebar>
      <title>Eliminate <interfacename>Declarable</interfacename>
      components</title>

      <para>One can configure custom types entirely through Spring as
      mentioned in <xref linkend="bootstrap:region" />. That way, one does not
      have to implement the <interfacename>Declarable</interfacename>
      interface and also benefits from all the features of the Spring IoC
      container (not just dependency injection but also life-cycle
      and instance management).</para>
    </sidebar>

    <para>As an example of configuring a
    <interfacename>Declarable</interfacename> component using Spring, consider
    the following declaration (taken from the
    <interfacename>Declarable</interfacename> javadoc):</para>

    <programlisting language="xml">&lt;cache-loader&gt;
   &lt;class-name&gt;com.company.app.DBLoader&lt;/class-name&gt;
   &lt;parameter name="URL"&gt;
     &lt;string&gt;jdbc://12.34.56.78/mydb&lt;/string&gt;
   &lt;/parameter&gt;
&lt;/cache-loader&gt;</programlisting>

    <para>To simplify the task of parsing, converting the parameters and
    initializing the object, Spring Data GemFire offers a base class
    (<classname>WiringDeclarableSupport</classname>) that allows GemFire user
    objects to be wired through a <emphasis>template</emphasis> bean
    definition or, in case that is missing, perform autowiring through the
    Spring container. To take advantage of this feature, the user objects need
    to extend <classname>WiringDeclarableSupport</classname> which
    automatically locates the declaring
    <interfacename>BeanFactory</interfacename> and performs wiring as part of
    the initialization process.</para>

    <sidebar>
      <title>Why is a base class needed?</title>

      <para>In the current GemFire release there is no concept of an
      <emphasis>object factory</emphasis> and the types declared are
      instantiated and used as is. In other words, there is no easy way
      to manage object creation outside GemFire.
      </para>
    </sidebar>

    <section id="apis:declarable:template-wiring">
      <title>Configuration using <emphasis>template</emphasis>
      definitions</title>

      <para>When used, <classname>WiringDeclarableSupport</classname> tries to
      first locate an existing bean definition and use that as wiring
      template. Unless specified, the component class name will be used as an
      implicit bean definition name. Let's see how our
      <classname>DBLoader</classname> declaration would look in that
      case:</para>

      <programlisting language="java">public class DBLoader extends WiringDeclarableSupport implements CacheLoader {
  private DataSource dataSource;

  public void setDataSource(DataSource ds){
    this.dataSource = ds;
  }

  public Object load(LoaderHelper helper) { ... }
}</programlisting>

      <programlisting language="xml">&lt;cache-loader&gt;
   &lt;class-name&gt;com.company.app.DBLoader&lt;/class-name&gt;
   &lt;!-- no parameter is passed (use the bean implicit name
   that is the class name) --&gt;
&lt;/cache-loader&gt;</programlisting>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

  &lt;bean id="dataSource" ... /&gt;

     &lt;!-- template bean definition --&gt;
     &lt;bean id="com.company.app.DBLoader" abstract="true" p:dataSource-ref="dataSource"/&gt;
&lt;/beans&gt;</programlisting>

      <para>In the scenario above, as no parameter was specified, a bean with
      the id/name <literal>com.company.app.DBLoader</literal> was used as a template
      for wiring the instance created by GemFire. For cases where the bean name uses a different
      convention, one can pass in the <literal>bean-name</literal> parameter
      in the GemFire configuration:</para>

      <programlisting language="xml">&lt;cache-loader&gt;
   &lt;class-name&gt;com.company.app.DBLoader&lt;/class-name&gt;
   &lt;!-- pass the bean definition template name
        as parameter --&gt;
   &lt;parameter name="bean-name"&gt;
     &lt;string&gt;template-bean&lt;/string&gt;
   &lt;/parameter&gt;
&lt;/cache-loader&gt;</programlisting>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;

  &lt;bean id="dataSource" ... /&gt;

     &lt;!-- template bean definition --&gt;   
     &lt;bean id="template-bean" abstract="true" p:dataSource-ref="dataSource"/&gt;
     
&lt;/beans&gt;</programlisting>

      <note>
        <para>The <emphasis>template</emphasis> bean definitions do not have
        to be declared in XML - any format is allowed (Groovy, annotations,
        etc..).</para>
      </note>
    </section>

    <section id="apis:declarable:autowiring">
      <title>Configuration using auto-wiring and annotations</title>

      <para>If no bean definition is found, by default,
      <classname>WiringDeclarableSupport</classname> will <ulink
      url="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-factory-autowire">autowire</ulink>
      the declaring instance. This means that unless any dependency injection
      <emphasis>metadata</emphasis> is offered by the instance, the container
      will find the object setters and try to automatically satisfy these
      dependencies. However, one can also use JDK 5 annotations to provide
      additional information to the auto-wiring process. We strongly recommend
      reading the dedicated <ulink
      url="http://static.springsource.org/spring/docs/current/spring-framework-reference/htmlsingle/spring-framework-reference.html#beans-annotation-config">chapter</ulink>
      in the Spring documentation for more information on the supported
      annotations and enabling factors.</para>

      <para>For example, the hypothetical <literal>DBLoader</literal>
      declaration above can be injected with a Spring-configured
      <interface>DataSource</interface> in the following way:</para>

      <programlisting language="java">public class DBLoader extends WiringDeclarableSupport implements CacheLoader {
  // use annotations to 'mark' the needed dependencies 
  @javax.inject.Inject
  private DataSource dataSource;

  public Object load(LoaderHelper helper) { ... }
}</programlisting>

      <programlisting language="xml">&lt;cache-loader&gt;
   &lt;class-name&gt;com.company.app.DBLoader&lt;/class-name&gt;
   &lt;!-- no need to declare any parameters anymore
        since the class is auto-wired --&gt;
&lt;/cache-loader&gt;</programlisting>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd"&gt;
            
     &lt;!-- enable annotation processing --&gt;   
     &lt;context:annotation-config/&gt;
     
&lt;/beans&gt;</programlisting>

      <para>By using the JSR-330 annotations, the cache loader code has been
      simplified since the location and creation of the DataSource has been
      externalized and the user code is concerned only with the loading
      process. The <interfacename>DataSource</interfacename> might be
      transactional, created lazily, shared between multiple objects or
      retrieved from JNDI - these aspects can be easily configured and changed
      through the Spring container without touching the
      <classname>DBLoader</classname> code.</para>
    </section>
  </section>

</chapter>