<?xml version="1.0" encoding="UTF-8"?>
<section id="data-access" version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Using the GemFire Data Access Namespace</title>

  <para>In addition to the core <literal>gfe</literal> namespace, Spring Data
  GemFire provides a <literal>gfe-data</literal> namespace intended primarily
  to simplify the development of GemFire client applications. This namespace
  currently supports for GemFire <link
  linkend="gemfire-repositories">repositories</link> and function <link
  linkend="function-execution">execution</link> and a
  <tag>&lt;datasource&gt;</tag> tag that offers a convenient way to connect to
  the data grid. </para>

  <section id="data-access:datasource">
    <title>An Easy Way to Connect to GemFire </title>

    <para>For many applications, A basic connection to a GemFire grid, using
    default values is sufficient. Spring Data GemFire's <tag>&lt;datasource&gt;</tag> tag
    provides a simple way to access data. The data source creates a client
    cache and connection pool. In addition, it will query the member servers
    for all existing root regions and create a proxy (empty) client region for
    each one. </para>

    <programlisting language="xml">&lt;gfe-data:datasource&gt;
   &lt;locator host="somehost" port="1234"/&gt;
&lt;/gfe-data:datasource&gt;</programlisting>

    <para>The datasource tag is synactically similar to <tag>&lt;gfe:pool&gt;</tag>.
    It may be configured with one or more locator or server tags to connect to
    an existing data grid. Additionally, all attributes available to configure
    a pool are supported. This configuration will automatically create
    ClientRegion beans for each region defined on members connected to the
    locator, so they may be seamlessly referenced by Spring Data mapping
    annotations, GemfireTemplate, and wired into application
    classes.</para>

    <para>Of course, you can explicitly configure client regions. For
    example, if you want to cache data in local memory:
    <programlisting
    language="xml">&lt;gfe-data:datasource&gt;
   &lt;locator host="somehost" port="1234"/&gt;
&lt;/gfe-data:datasource&gt;

&lt;gfe:client-region id="Customer" shortcut="CACHING_PROXY"/&gt;</programlisting></para>
  </section>
</section>