<?xml version="1.0" encoding="UTF-8"?>
<section id="bootstrap:cache" version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:ns52="http://www.w3.org/1998/Math/MathML"
         xmlns:ns5="http://www.w3.org/1999/xlink"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring the GemFire Cache</title>

  <para>In order to use GemFire, one needs to either create a new
  <interfacename>Cache</interfacename> or connect to an existing one. In the
  current version of GemFire, there can be only one opened cache per VM (or
  per classloader to be technically correct). In most cases the cache is
  created once.</para>

  <note>This section describes the creation and configuration of a full cache
  member, appropriate for peer to peer cache topologies and cache servers. A
  full cache is also commonly used for standalone applications, integration
  tests and proofs of concept. In a typical production system, most
  application processes will act as cache clients and will create a
  ClientCache instance instead. This is described in the sections <xref
  linkend="bootstrap:cache:client"/> and <xref
  linkend="bootstrap:region:client"/></note>

  <para>A cache with default configuration can be created with a very simple
  declaration:</para>

  <programlisting language="xml">&lt;gfe:cache/&gt;</programlisting>

  <para>A Spring application context containing this definition will, upon
  initialization, will register a <literal>CacheFactoryBean</literal> to
  create a Spring bean named <literal>gemfireCache</literal> referencing a
  GemFire <interfacename>Cache</interfacename> instance. This will be either
  an existing cache, or if one does not exist, a newly created one. Since no
  additional properties were specified, a newly created cache will apply the
  default cache configuration.</para>

  <para>All Spring Data GemFire components which depend on the Cache respect
  this naming convention so that there is no need to explicitly declare the
  Cache dependency. If you prefer, you can make the dependence explicit via
  the <literal>cache-ref</literal> attribute provided by various namespace
  elements. Also you can easily override the Cache's bean name:</para>

  <programlisting language="xml">&lt;gfe:cache id="my-cache"/&gt;</programlisting>

  <para>Starting with Spring Data GemFire 1.2.0, The GemFire Cache may be
  fully configured using Spring. However, GemFire's native XML configuration
  file (e.g., cache.xml) is also supported. For scenarios in which the GemFire
  cache needs to be configured natively, simply provide a reference the
  GemFire configuration file using the <literal>cache-xml-location</literal>
  attribute:</para>

  <programlisting language="xml">&lt;gfe:cache id="cache-with-xml" cache-xml-location="classpath:cache.xml"/&gt;</programlisting>

  <para>In this example, if the cache needs to be created, it will use the
  file named <literal>cache.xml</literal> located in the classpath
  root.</para>

  <note>
    <para>Note that the configuration makes use of Spring's <ulink
        url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/resources.html">
        <interfacename>Resource</interfacename>
      </ulink> abstraction to locate the file. This allows various search
    patterns to be used, depending on the runtime environment or the prefix
    specified (if any) in the resource location.</para>
  </note>

  <para>In addition to referencing an external configuration file one can
  specify GemFire <ulink
  url="http://pubs.vmware.com/vfabricNoSuite/topic/com.vmware.vfabric.gemfire.7.0/reference/topics/gemfire_properties.html">properties</ulink>
  using any of Spring's common properties support features. For example, one
  can use the <literal>properties</literal> element defined in the
  <literal>util</literal> namespace to define properties directly or load
  properties from properties files. The latter is recommended for
  externalizing environment specific settings outside the application
  configuration:</para>

  <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:gfe="http://www.springframework.org/schema/gemfire"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"&gt;
        
     &lt;gfe:cache properties-ref="props"/&gt;
 
     &lt;util:properties id="props" location="file:/vfabric/gemfire/gemfire.properties"/&gt;
&lt;/beans&gt;</programlisting>

  <note>
    <para>The cache settings apply only if a new cache needs to be created. If
    an open cache already exists in the JVM, these settings will be
    ignored.</para>
  </note>

  <section id="bootstrap:cache:advanced">
    <title>Advanced Cache Configuration</title>

    <para>For advanced cache configuration, the <literal>cache</literal>
    element provides a number of configuration options exposed as attributes
    or child elements</para>

    <programlisting language="xml"><co id="gfe#cache-element#attributes"/>
&lt;gfe:cache
        copy-on-read="true"
        critical-heap-percentage="70" 
        eviction-heap-percentage="60"
        lock-lease="120"
        lock-timeout="60"
        pdx-serializer="myPdxSerializer"
        pdx-disk-store="diskStore"
        pdx-ignore-unread-fields="true"
        pdx-persistent="true"
        pdx-read-serialized="false"
        message-sync-interval="1"
        search-timeout="300"
        close="false"
        lazy-init="true"
    &gt;
     <co id="gfe#transaction#listener"/>&lt;gfe:transaction-listener ref="myTransactionListener"/&gt; 

     <co id="gfe#transaction#writer"/>&lt;gfe:transaction-writer&gt;
        &lt;bean class="org.springframework.data.gemfire.example.TransactionListener"/&gt;
      &lt;/gfe:transaction-writer&gt;
      
     <co id="gfe#dynamic#region"/>&lt;gfe:dynamic-region-factory/&gt;
     <co id="gfe#jndi#binding"/>&lt;gfe:jndi-binding jndi-name="myDataSource" type="ManagedDataSource"/&gt;
&lt;/gfe:cache&gt;
    </programlisting>

    <calloutlist>
      <callout arearefs="gfe#cache-element#attributes">
        <para>Various cache options are supported by attributes. For further
        information regarding anything shown in this example, please consult
        the GemFire product <ulink
        url="http://www.vmware.com/support/pubs/vfabric-gemfire.html">documentation</ulink></para>
        <para>The <literal>close</literal> attribute determines if the cache should be closed when the Spring application context is closed.
        The default is <literal>true</literal> however for cases in which multiple application contexts use the cache (common in web applications), set this value to <literal>false</literal>.</para>
        <para>The <literal>lazy-init</literal> attribute determines if the cache should be initialized before another bean references it.
        The default is <literal>true</literal> however in some cases it may be convenient to set this value to <literal>false</literal>.</para>
      </callout>

      <callout arearefs="gfe#transaction#listener">
        <para>An example of a
        <interfacename>TransactionListener</interfacename> callback
        declaration using a bean reference. The referenced bean must implement
        <ulink
        url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/TransactionListener.html">TransactionListener</ulink></para>
      </callout>

      <callout arearefs="gfe#transaction#writer">
        <para>An example of a <interfacename>TransactionWriter</interfacename>
        callback declaration using an inner bean declaration this time. The
        bean must implement <ulink
        url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/TransactionWriter.html">TransactionWriter</ulink></para>
      </callout>

      <callout arearefs="gfe#dynamic#region">
        <para>Enable GemFire's <ulink
        url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/DynamicRegionFactory.html">DynamicRegionFactory</ulink></para>
      </callout>

      <callout arearefs="gfe#jndi#binding">
        <para>Declares a JNDI binding to enlist an external datasource in a
        GemFire transaction</para>
      </callout>
    </calloutlist>

    <note>The <literal xmlns="">use-bean-factory-locator</literal> attribute
    (not shown) deserves a mention. The factory bean responsible for creating
    the cache uses an internal Spring type called a <interfacename
    xmlns="">BeanFactoryLocator</interfacename> to enable user classes
    declared in GemFire's native <literal xmlns="">cache.xml</literal> to be
    registered as Spring beans. The <interfacename
    xmlns="">BeanFactoryLocator</interfacename> implementation also permits
    only one bean definition for a cache with a given id. In certain
    situations, such as running JUnit integration tests from within Eclipse,
    it is necessary to disable the <interfacename
    xmlns="">BeanFactoryLocator</interfacename> by setting this value to
    <literal xmlns="">false</literal> to prevent an exception. This exception
    may also arise during JUnit tests running from a build script. In this
    case the test runner should be configured to fork a new JVM for each test
    (in maven, set <literal
    xmlns="">&lt;forkmode&gt;always&lt;/forkmode&gt;</literal>) . Generally
    there is no harm in setting this value to false.</note>

    <section>
      <title>Enabling PDX Serialization</title>

      <para>The example above includes a number of attributes related to
      GemGire's enhanced serialization framework, PDX. While a complete
      discussion of PDX is beyond the scope of this reference guide, it is
      important to note that PDX is enabled by registering a PDX serializer
      which is done via the <literal>pdx-serializer</literal> attribute.
      GemFire provides an implementation class <classname>
      com.gemstone.gemfire.pdx.ReflectionBasedAutoSerializer</classname>,
      however it is common for developers to provide their own implementation.
      The value of the attribute is simply a reference to a Spring bean that
      implements the required interface. More information on serialization
      support can be found in <xref linkend="serialization"/></para>

      <para/>
    </section>
  </section>

  <section id="bootstrap:cache:server">
    <title>Configuring a GemFire Cache Server</title>

    <para>In Spring Data GemFire 1.1 dedicated support for configuring a
    <ulink
    url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/server/CacheServer.html">CacheServer</ulink>
    was added, allowing complete configuration through the Spring
    container:</para>

    <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:gfe="http://www.springframework.org/schema/gemfire"
  xmlns:context="http://www.springframework.org/schema/context" 
  xsi:schemaLocation="http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;

  &lt;gfe:cache /&gt;

  &lt;!-- Advanced example depicting various cache server configuration options --&gt;
  &lt;gfe:cache-server id="advanced-config" auto-startup="true"
       bind-address="localhost" port="${gfe.port.6}" host-name-for-clients="localhost"
       load-poll-interval="2000" max-connections="22" max-threads="16"
       max-message-count="1000" max-time-between-pings="30000"  
       groups="test-server"&gt;

     &lt;gfe:subscription-config eviction-type="ENTRY" capacity="1000" disk-store="file://${java.io.tmpdir}"/&gt;
   &lt;/gfe:cache-server&gt;

   &lt;context:property-placeholder location="classpath:cache-server.properties"/&gt;

&lt;/beans&gt;</programlisting>

    <para>The configuration above illustrates the
    <literal>cache-server</literal> element and the many options
    available.</para>

    <note>
      <para>Rather than hard-coding the port, this configuration uses Spring's
      <literal>
          <ulink
          url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/xsd-config.html#xsd-config-body-schemas-context">context</ulink>
        </literal> namespace to declare a
      <literal>property-placeholder</literal>. The <ulink
      url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/beans.html#beans-factory-placeholderconfigurer">property
      placeholder</ulink> reads one or more properties file and then replaces
      property placeholders with values at runtime. This allows administrators
      to change such values without having to touch the main application
      configuration. Spring also provides <ulink
      url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/new-in-3.0.html#new-feature-el">SpEL</ulink>
      and the <ulink
      url="http://static.springsource.org/spring/docs/current/spring-framework-reference/html/new-in-3.1.html#new-in-3.1-environment-abstraction">environment
      abstraction</ulink> one to support externalization of environment
      specific properties from the main code base, easing the deployment
      across multiple machines.</para>
    </note>

    <note>
      <para>To avoid initialization problems, the
      <interfacename>CacheServer</interfacename>s started by Spring Data
      GemFire will start <emphasis>after</emphasis> the container has been
      fully initialized. This allows potential regions, listeners, writers or
      instantiators defined declaratively to be fully initialized and
      registered before the server starts accepting connections. Keep this in
      mind when programmatically configuring these items as the server might
      start after your components and thus not be seen by the clients
      connecting right away.</para>
    </note>
  </section>

  <section id="bootstrap:cache:client">
    <title>Configuring a GemFire Client Cache</title>

    <para>Another configuration addition in Spring Data GemFire 1.1 is the
    dedicated support for configuring <ulink
    url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/client/ClientCache.html">ClientCache</ulink>.
    This is similar to a <link linkend="bootstrap:cache">cache</link> in both
    usage and definition and supported by
    <classname>org.springframework.data.gemfire.clientClientCacheFactoryBean</classname>.</para>

    <programlisting language="xml">&lt;beans&gt;
    &lt;gfe:client-cache /&gt;   
&lt;/beans&gt;</programlisting>

    <para><literal>client-cache</literal> supports much of the same options as
    the <emphasis>cache</emphasis> element. However as opposed to a
    <emphasis>full</emphasis> cache, a client cache connects to a remote cache
    server through a pool. By default a pool is created to connect to a server
    on <literal>localhost</literal> port <literal>40404</literal>. The the
    default pool is used by all client regions unless the region is configured
    to use a different pool.</para>

    <para>Pools can be defined through the <literal>pool</literal> element;
    The client side <literal>pool</literal> can be used to configure
    connectivity to the server for individual entities or for the entire
    cache. For example, to customize the default pool used by
    <literal>client-cache</literal>, one needs to define a pool and wire it to
    cache definition:</para>

    <programlisting language="xml">&lt;beans&gt;
  &lt;gfe:client-cache id="simple" pool-name="my-pool"/&gt;

  &lt;gfe:pool id="my-pool" subscription-enabled="true"&gt;
     &lt;gfe:locator host="${locatorHost}" port="${locatorPort}"/&gt;
 &lt;/gfe:pool&gt;
&lt;/beans&gt;</programlisting>
  </section>

  <para>The &lt;client-cache&gt; tag also includes a <literal>ready-for-events</literal>
  attribute. If set to <literal>true</literal>, the client cache initialization will include
  <ulink url="http://www.vmware.com/support/developer/vfabric-gemfire/700-api/com/gemstone/gemfire/cache/client/ClientCache.html#readyForEvents()">ClientCache.readyForEvents()</ulink>. </para>

  <para>Client side configuration is covered in more detail in <xref
  linkend="bootstrap:region:client"/>.</para>
</section>